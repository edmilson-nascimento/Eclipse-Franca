<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="ABAP" deleted="false" description="Parametrized test - Definition" enabled="true" name="paramTestDef">    TYPES :&#13;
      BEGIN OF ty_test_case,&#13;
        actual    TYPE ${cursor},&#13;
        expected  TYPE ${cursor},&#13;
      END OF ty_test_case,&#13;
      tty_test_case TYPE STANDARD TABLE OF ty_test_case WITH DEFAULT KEY.&#13;
&#13;
&#13;
METHODS test_cases RETURNING VALUE(rt_result) TYPE tty_test_case.&#13;
METHODS assert IMPORTING is_test_cases TYPE ty_test_case.&#13;
methods ${testmethod}.&#13;
</template><template autoinsert="true" context="ABAP" deleted="false" description="Parametrized test - Implementation" enabled="true" name="paramTestImpl">  METHOD test_cases.&#13;
    rt_result = VALUE #( ( actual = ${actual}   expected = ${expected}  message = ${message} ) ).&#13;
  ENDMETHOD.&#13;
&#13;
  METHOD assert.&#13;
    cl_abap_unit_assert=&gt;assert_equals( msg = is_test_case-message&#13;
                                        exp = is_test_case-expected&#13;
                                        act = ${productivemethod}( is_test_case-actual ) ).&#13;
  ENDMETHOD.&#13;
&#13;
  METHOD ${testmethod}.&#13;
    LOOP AT test_cases( ) INTO DATA(ls_test_case).&#13;
      assert( ls_test_case ).&#13;
    ENDLOOP.&#13;
  ENDMETHOD.</template></templates>